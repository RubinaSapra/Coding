int binarySearch(vector<int> arr, int l, int r, int x) 
{ 
    if (r < l) 
        return -1; 
  
    int mid = l + (r - l) / 2; 
    if (arr[mid] == x) 
        return mid; 
    if (arr[mid] > x) 
        return binarySearch(arr, l, mid - 1, x); 
        return binarySearch(arr, mid + 1, r, x); 
} 
int Solution::findCount(const vector<int> &arr, int x) {
    int n = arr.size();
     int ind = binarySearch(arr, 0, arr.size()-1, x); 
      if (ind == -1) 
        return 0; 
     int count = 1; 
    int left = ind - 1; 
    while (left >= 0 && arr[left] == x) 
        count++, left--; 
  
    int right = ind + 1; 
    while (right < n && arr[right] == x) 
        count++, right++; 
  
    return count; 

}
