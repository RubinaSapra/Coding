int nofst(vector<int> v,int mid)
{
int total=0,n=1;
for(int i=0;i<v.size();i++)
{
total+=v[i];
if(total>mid)
{
total=v[i];
n++;
}
}
return n;
}
int sum(vector<int> v)
{
int s=0;
for(int i=0;i<v.size();i++)
s+=v[i];
return s;
}
int Solution::books(vector<int> &A, int B) {
if(B>A.size())
return -1;
else if(B==1)
return sum(A);
else if(B==A.size())
return *max_element(A.begin(),A.end());
else
{
int low = *max_element(A.begin(),A.end()),high=sum(A);

  while(low<high)
  {
      int mid =low+(high-low)/2;
      int reqst=nofst(A,mid);
      if(reqst<=B)
      high=mid;
      else
      low=mid+1;
      
  }
  return low;
}

}
