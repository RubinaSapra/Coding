You are given a string, S, and a list of words, L, that are all of the same length.
Find all starting indices of substring(s) in S that is a concatenation of each word in L exactly once and without any intervening characters.
Example :
S: "barfoothefoobarman"
L: ["foo", "bar"]
You should return the indices: [0,9].
    vector<int> Solution::findSubstring(string A, const vector<string> &B) {
unordered_map<string,int> words;
int len = B[0].size();
int num_words = B.size();
int window = num_words*len;
string part,word;
vector<int>ans;
if(window> A.size())
return ans;
for(int i=0;i<B.size();i++){
if(words[B[i]] == 0)
words[B[i]]=1;
else
words[B[i]]++;

}
for(int i=0;i<A.size()-window+1;i++){
    part = A.substr(i,window);

    unordered_map<string,int> temp = words;
    for(int j=0;j<num_words;j++){
        word = part.substr(j*len,len);
        if(temp.find(word)!=temp.end()){
            if(temp[word]==1)
                temp.erase(word);
            else
                temp[word]--;
        }
        else
            break;
    }
    if(temp.empty()){
        ans.push_back(i);
    }
}
return ans;
}
