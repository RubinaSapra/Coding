struct node
{
    bool isw ;
    node* a[26];
    node()
    {
        isw = false;
        for(int i=0; i<26; i++)
        a[i]=NULL;
    }
};
struct trie
{
    node* root;
    trie()
    {
        root= new node();
    }
    void insert( string s )
    {
        node* tmp = root;
        for( char c : s)
        {
            if(!tmp->a[c-'a'])
            tmp->a[c-'a'] = new node();
            tmp = tmp->a[c-'a'];
        }
        tmp->isw = true;
    }
    bool search(string s)
    {
        node* tmp = root;
        for(char c : s)
        {
            if(!tmp->a[c-'a'])
            return false;
            tmp = tmp->a[c-'a'];
        }
        return tmp->isw;
    }
};
bool cmp ( pair < int, int> &a , pair < int, int>&b)
{
    if(a.second == b.second)
    return a.first<b.first;
    return a.second>b.second;
}
vector<int> Solution::solve(string A, vector<string> &B) {
    string t = "";
    trie tr;
    A+='_';
    for(char c : A)
    {
        if(c=='_')
        {
            tr.insert(t);
            t="";
        }
        else
        t+=c;
    }
    vector < pair < int, int> > v;
   for(int i=0; i<B.size() ; i++)
   {
       string s = B[i];
       s+='_';
       int p=0;
        t="";
       for(char c : s)
       {
           if(c=='_')
           {
               if(tr.search(t))
               p++;
               t="";
           }
           else
           t+=c;
       }
      v.push_back({i, p }); 
   }
   sort(v.begin() , v.end() , cmp);
   vector<int> res;
   for(auto it : v)
   res.push_back(it.first);
   return res;
}
