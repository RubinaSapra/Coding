//Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queensâ€™ placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
bool dia( vector<string> &x , int r , int c)
{
    for(int i=r,j=c ; i>=0 && j>=0 ; i--,j--)
    {
        if(x[i][j]=='Q')
        return false;
    }
    for(int i=r,j=c ; i>=0 && j<x[0].length() ; i-- , j++ )
    {
          if(x[i][j]=='Q')
        return false;
    }
    return true;
}
 
bool col(vector< string>&x , int r , int c)
{
    for(int i=0;i<x[0].length() ; i++)
    {
        if(x[i][c] =='Q')
        return false;
    }
    return true;
}
void build( vector< vector < string> > &res, vector<string> &x , int A , int r)
{
    if(r== A)
    {
        res.push_back(x);
        return;
    }
   for(int i=0; i<x[r].length() ; i++){
       if(x[r][i] =='.' && col(x,r,i) && dia(x,r,i))
       {
           x[r][i]='Q';
         build(res,x,A,r+1);
           x[r][i]='.';
       }
   }
}

vector<vector<string> > Solution::solveNQueens(int A) {
   vector< vector< string> > res;
   vector< string> x;
   for(int i=0;i<A; i++)
   {
       string s(A,'.');
      x.push_back(s);
   }
   build(res, x, A , 0 );
   return res;
}
