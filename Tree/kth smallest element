//first
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 int ans;
 void solve(TreeNode* a, int &k)
 {
     if(!a) return;
     solve(a->left , k);
     k--;
     if(k==0)
     ans = a->val;
     solve(a->right, k);
 }
int Solution::kthsmallest(TreeNode* A, int B) {
     solve(A , B);
     return ans;
}


//sec





class Solution {
public:
    using VI = vector<int>;
    int kthSmallest(TreeNode* root, int K, int ans = -1e9) {
        go(root, K, ans);
        return ans;
    }
private:
    void go(TreeNode* root, int& K, int& ans) {
        if (K && root->left) go(root->left, K, ans);
        if (!--K) ans = root->val; // K-th largest 
        if (K && root->right) go(root->right, K, ans);
    }
};
