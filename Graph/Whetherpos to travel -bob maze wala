#include<bits/stdc++.h>
using namespace std;
bool safe( int i , int j , int n , int a[20][20])
{
   if(i<0 || i>=n || j<0 || j>=n || a[i][j] == 0 )
   return false;   
   return true;
}
bool bfs(vector<int> (&g)[402] , int v , int s , int d)
{
    if(s==d) return true;
    int vis[v];
    for(int i=0 ; i< v; i++ ) 
    vis[i] = 0;
    queue<int> q; 
    q.push(s);
    vis[s] = 1;
    while(!q.empty())
    {
        int curr= q.front() ;
        q.pop();
         for(vector<int> :: iterator it = g[curr].begin() ; it!=g[curr].end() ; it++)
         {
             if(*it == d) return true;
             if(!vis[*it])
             {
                 vis[*it] =1 ;
                 q.push(*it);
             }
         }
    }
    return false;
    
}
void pushedge( vector<int> (&g)[402], int s , int d)
{
    g[s].push_back(d);
    g[d].push_back(s);
}
int main() {
	//code
	int t,n;
	cin>>t;
	for(int y=0 ; y<t; y++)
	{
	    cin>>n;
	    int a[20][20];
	    for(int j=0 ; j<n; j++ )
	    {
	        for(int k = 0 ; k<n; k++)
	        cin>>a[j][k];
	    }
   int k= 1 , s , d; 
   int v = n*n +2 ;
   vector<int> g[402];
   for(int i = 0 ; i< n; i++)
   {
       for(int j = 0 ; j<n ; j++ )
       {
           if(a[i][j]!=0)
           {
               if(safe(i,j+1,n,a))
               pushedge(g, k , k+1);
               if(safe(i,j-1,n,a))
               pushedge(g,k, k-1);
               if(safe(i+1 , j , n , a ))
               pushedge(g,k,k+n);
               if(safe(i-1 , j , n, a))
               pushedge(g,k,k-n);
               
           }
           if(a[i][j] == 1)
           s = k;
           if(a[i][j] == 2)
           d= k;
           k++;
       }
   }
    cout<<bfs(g,v , s, d)<<"\n";
	}
	
}
